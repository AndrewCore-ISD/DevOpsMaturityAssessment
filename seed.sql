INSERT INTO `section`(`SectionId`, `Title`) VALUES 
(1, 'Team Agility'),
(2, 'Collaboration'),
(3, 'Automation'),
(4, 'Architecture and Design'),
(5, 'DevOps Practices'),
(6, 'Org Structure, Culture and Incentives'),
(7, 'Standardisation');

INSERT INTO `questiontype`(`QuestionTypeId`, `Type`) VALUES 
(1, 'Yes/No'),
(2, 'SelectMany'),
(3, 'SelectOne');

INSERT INTO `question`(`QuestionId`, `SectionId`, `QuestionTypeId`, `Text`) VALUES 
(1, 1, 1, 'Does the team have a new, potentially shippable, version of the product available every 1-2 weeks?'),
(2, 1, 2, 'Which of the following are measured by the team (tick all that apply)?'),
(3, 1, 1, 'Does the team regularly meet to discuss what is working well, what isn\'t working well and what they can improve, and the top improvement items are implemented?'),
(4, 1, 3, 'Does the team take actions to ensure that the team does not create or experience bottlenecks with/for other teams?'),
(5, 1, 1, 'Are any work items that are blocked swiftly identified and then people collaborate to rectify the situation?'),
(6, 1, 1, 'Is there a clearly defined mechanism for prioritising the backlog?'),
(7, 1, 1, 'Does the team work on the highest priority items in the backlog?'),
(8, 1, 1, 'Are the most experienced team members allocated last so they can help others develop cross functional skills and be free to focus on the most business critical or complex problems?'),
(9, 1, 2, 'Does the team have fast feedback loops in place (tick all that apply)?'),
(10, 1, 1, 'Are there proactive steps taken to ensure there is no major dependency on "super heroes" (e.g. pair programming, mob learning, real options)?'),
(11, 2, 3, 'Are knowledge and interests shared within the team and with other teams within the organisation (for example via communities of interest)?'),
(12, 2, 1, 'Does the team have methods in place for asynchronous communication (for example Kanban Board, JIRA, Slack, Circuit)?'),
(13, 2, 1, 'Do people on the team have mechanisms to collaborate with people outside of the team?'),
(14, 2, 3, 'Are people on the team willing to work outside their usual specialism?'),
(15, 2, 3, 'Do people on the team have a preference towards the most immediate (information rich) comunication method available (e.g. voice call rather than email)?'),
(16, 2, 1, 'Is there sufficient opportunity for people on the team to meet face to face?'),
(17, 2, 3, 'How frequently are there misunderstandings between members of the team?'),
(18, 2, 3, 'Do people on the team share their ideas/concerns with the rest of the team and are they fairly represented?'),
(19, 3, 1, 'Are development and test environments consistent with production environments?'),
(20, 3, 3, 'Is the provisioning, configuration and management of infrastructure (e.g. networks, storage, etc.) automated (for example by using Infrastructure as Code)?'),
(21, 3, 2, 'For which of these is the configuration and management of environments automated (tick all that apply)?'),
(22, 3, 1, 'Are the required environments (e.g. dev, test, integration) available in line with demand (i.e. at the right time or in a way that doesnâ€™t incur delay to activity)?'),
(23, 3, 3, 'Is the provisioning, configuration and management of environments automated?'),
(24, 3, 3, 'Does the team have a high degree of automated unit tests in place (testing individual modules)?'),
(25, 3, 3, 'Does the team have a high degree of automated integration tests in place (testing the interaction of modules with each other)?'),
(26, 3, 3, 'Does the team have a high degree of automated system tests in place (confirming overall system functionality meets requirements)?'),
(27, 3, 3, 'Does the team have a high degree of automated performance tests in place?'),
(28, 3, 3, 'Does the team complete automated scanning of source code assets?'),
(29, 3, 3, 'Does the team complete automated scanning of binaries?'),
(30, 3, 3, 'Is code automatically scanned for quality during a build?'),
(31, 3, 1, 'Does failure to meet coding standards or security rules trigger a break in the build?'),
(32, 3, 1, 'Is automation code developed with the same rigor as product code (e.g. testing, source control)?'),
(33, 4, 3, 'Does the architecture of the application consist of loosely coupled components (choose the most accurate description)?'),
(34, 4, 2, 'Does the architecture enable development, testing and other QA activities to be representative and performed independently of each another without impacting production (tick all that apply)?'),
(35, 4, 3, 'Does the architecture enable the deployment of services independently of one another?'),
(36, 4, 1, 'Are all application logs written to a central log repository automatically with the configuration included in the environment design to allow portability between environments?'),
(37, 5, 2, 'Does the team manage their source code in a central source control system (tick all that apply)?'),
(38, 5, 3, 'How frequently do developers integrate their changes into a shared mainline (trunk)?'),
(39, 5, 3, 'Is there a defined code review and approval process?'),
(40, 5, 3, 'Whenever code is integrated with a shared mainline (trunk), are automated processes triggered?'),
(41, 5, 3, 'Is highest priority always given to fixing a broken build?'),
(42, 5, 1, 'Are adequate notifications in place to communicate the build status and failures to the team (e.g. automated e-mails, slack, circuit)?'),
(43, 5, 1, 'Is it possible to roll back the application cleanly and reliably?'),
(44, 5, 1, 'Does the team practice regular refactoring of their code?'),
(45, 5, 1, 'Is time allocated/dedicated to refactoring in order to improve code quality and reduce technical debt?'),
(46, 5, 1, 'Are there sufficient automated tests in place to enable developers to refactor with confidence?'),
(47, 5, 3, 'How widely does the team practice Test Driven Development (TDD), ensuring that automated tests are developed in advance of new features?'),
(48, 5, 1, 'Is a standard test framework (such as JUnit) used by the team?'),
(49, 5, 1, 'Is the refactoring step of the TDD cycle usually applied?'),
(50, 5, 1, 'Are mocks/stubs/simulators used to ensure that tests can be run quickly, frequently and repeatably?'),
(51, 6, 1, 'Is the team a cross functional delivery team comprising of development, testing and operations expertise?'),
(52, 6, 1, 'Are incentives for people on the team (both financial and non-financial) aligned to overall team results?'),
(53, 6, 1, 'Are those responsible for designing, developing, testing and operating the application all part of the same team?'),
(54, 6, 1, 'Does the team have accountability for the product throughout its life-cycle (introduction, growth, maturity, decline)?'),
(55, 6, 1, 'Does the team have a culture of experimentation and innovation?'),
(56, 6, 1, 'Does the team have a high trust culture which enables autonomy?'),
(57, 6, 1, 'Do people involved in developing and running the application have aligned incentives and goals?'),
(58, 6, 1, 'Does the team have a say in what they work on (e.g. self selection days)?'),
(59, 6, 1, 'Does the organisation\'s structure catalyse and support a DevOps approach?'),
(60, 6, 1, 'Is there a team charter that describes how the team behaves and works together?'),
(61, 6, 1, 'Is there a clear vision and purpose for the product?'),
(62, 6, 1, 'Are all the product\'s stakeholders identified and engaged?'),
(63, 6, 1, 'Is the team aligned and incentivised to a measurable business outcome?'),
(64, 6, 1, 'Do management and the wider organisation see the value in protecting time for continuous improvement?'),
(65, 6, 1, 'Does the team have enough time to learn new technologies, tools and practices?'),
(66, 6, 3, 'How frequently is there interaction between the business and the development team?'),
(67, 6, 3, 'Do senior stakeholders buy into and support the DevOps approach?'),
(68, 6, 1, 'Do members of the team practice continuous learning?'),
(69, 6, 1, 'Does the team have a feedback culture (where people are happy to quickly share negative and positive feedback)?'),
(70, 7, 2, 'Has the organisation standardised on a set of tooling standards (tick all that apply)?'),
(71, 7, 3, 'Has the organisation standardised on a set of application stacks/development languages?'),
(72, 7, 1, 'Do you make the best use of SaaS (Software as a Service) for utility applications (i.e. ones not used for competitive advantage such as version control)?'),
(73, 7, 1, 'As much as makes sense, do you use PaaS (Platform as a Service)?'),
(74, 7, 1, 'As much as makes sense, do you use IaaS (Infrastructure as a Service)?');

INSERT INTO `questionanswer`(`QuestionId`, `Text`, `Points`) VALUES
(1, 'Yes', 1), (1, 'No', 0),
(2, 'Elapsed lead time to deliver valuable changes (from initial request to production)', .5), (2, 'Frequency of deployments into production', .5), (2, 'Change failure rate', .5), (2, 'Time to restore service after a failure', .5),
(3, 'Yes', 1), (3, 'No', 0),
(4, 'Yes, and the actions are effective', 1), (4, 'Yes, but the actions are not always effective', .5), (4, 'No', 0),
(5, 'Yes', 1), (5, 'No', 0),
(6, 'Yes', 1), (6, 'No', 0),
(7, 'Yes', 1), (7, 'No', 0),
(8, 'Yes', 1), (8, 'No', 0),
(9, 'From testers: usually less than 1 day', .5), (9, 'From the product owner: usually less than 3 days', .5), (9, 'From customers: usually less than 2 weeks', .5), (9, 'From end users: usually less than 2 weeks', .5),
(10, 'Yes', 1), (10, 'No', 0),
(11, 'Yes', 1), (11, 'Yes, but only within the team', .5), (11, 'No', 0),
(12, 'Yes', 1), (12, 'No', 0),
(13, 'Yes', 1), (13, 'No', 0),
(14, 'Everyone on the team is willing to do this', 1), (14, 'Some people on the team are willing to do this', .5), (14, 'Generally people on the team prefer not to do this', 0),
(15, 'Everyone on the team does', 1), (15, 'Most people on the team do', .5), (15, 'Most people on the team do not', 0),
(16, 'Yes', 1), (16, 'No', 0),
(17, 'Hardly ever', 1), (17, 'Fairly frequently (at least once per week)', .5), (17, 'Very frequently (at least once per day)', 0),
(18, 'Yes, always', 1), (18, 'Yes, most of the time', .5), (18, 'Hardly ever', 0),
(19, 'Yes', 1), (19, 'No', 0),
(20, 'Yes', 1), (20, 'Partially', .5), (20, 'No', 0),
(21, 'Virtual machines', .5), (21, 'Networks', .5), (21, 'Operating systems', .5), (21, 'Security elements', .5), (21, 'The application stacks', .5), (21, 'The applications', .5),
(22, 'Yes', 1), (22, 'No', 0),
(23, 'Yes, and scaling is automatic', 1), (23, 'Yes, but scaling is manual', .5), (23, 'No', 0),
(24, 'Yes, automated tests are in place and run on every build', 1), (24, 'Yes, automated tests are in place', .5), (24, 'No', 0),
(25, 'Yes, automated tests are in place and run on every build', 1), (25, 'Yes, automated tests are in place', .5), (25, 'No', 0),
(26, 'Yes, automated tests are in place and run on every build', 1), (26, 'Yes, automated tests are in place', .5), (26, 'No', 0),
(27, 'Yes, automated tests are in place and run on every build', 1), (27, 'Yes, automated tests are in place', .5), (27, 'No', 0),
(28, 'Yes, automated tests are in place and run on every build', 1), (28, 'Yes, automated tests are in place', .5), (28, 'No', 0),
(29, 'Yes, automated tests are in place and run on every build', 1), (29, 'Yes, automated tests are in place', .5), (29, 'No', 0),
(30, 'Yes, automated tests are in place and run on every build', 1), (30, 'Yes, automated tests are in place', .5), (30, 'No', 0),
(31, 'Yes', 1), (31, 'No', 0),
(32, 'Yes', 1), (32, 'No', 0),
(33, 'The application is built from a number of stateless components with scaling and resilience provided at the application layer (full MicroServices)', 3), (33, 'The application is made up of several separate components but relies on external solutions to provide availability and scalability', 2), (33, 'The application is largely monolithic but made up of code modules that can be worked on independently and then re-compiled into a single unit', 1), (33, 'The application is built up of monolithic code and can only be changed in its entirety as part of a release schedule', 0),
(34, 'There are fully separate development, test and QA environments', .5), (34, 'Environments are regularly re-built or synchronised (at least monthly)', .5), (34, 'The 3 environments are similar at all levels (resilience, performance, security, dependencies)', .5), (34, 'Each environment can be torn down and rebuilt without affecting other environments', .5), (34, 'Environment specific configuration items are decoupled from the code in order to accelerate rebuilds', .5),
(35, 'Yes, every element of functionality can be updated individually and applied to the application', 2), (35, 'Partially, some elements can be updated independently, but there are certain core components that need to be updated together in order to maintain functionality', 1), (35, 'No, updates to the system need to be performed together in a formal release cycle', 0),
(36, 'Yes', 1), (36, 'No', 0),
(37, 'We have a common code repository (e.g. Git based repo)', .5), (37, 'We have a defined branching structure', .5), (37, 'We have defined repository structure', .5), (37, 'Our structure and branching strategy are aligned to our Dev, Test, and Prod environments (enabling a smooth flow between environments)', .5),
(38, 'Code is integrated at least once per day', 2), (38, 'Code is integrated at least weekly', 1), (38, 'Code is integrated infrequently but at least once a month', .5), (38, 'Code is integrated on an ad hoc basis when the developer feels it is ready to share', 0),
(39, 'We have a targeted code review process that is appropriate and ensures code is published in a timely manner', 1), (39, 'We have a code review process but the process incurs delays and hinders deployments', .5), (39, 'We have no code review process and bugs can frequently be integrated into the mainline (trunk)', 0),
(40, 'Yes, an automated build of the software is triggered into a production-like environment, automated tests are then triggered and software is available to be automatically deployed into production', 2), (40, 'Yes, an automated build of the software is triggered into a production-like environment, manual tests are then performed before the release is manually deployed into production', 1), (40, 'Yes, an automated build of the software is triggered, however this build is then manually deployed into the relevant environments (QA and Prod)', .5), (40, 'No', 0),
(41, 'Yes, builds are fixed / rolled back within 10 minutes', 2), (41, 'Yes, builds are fixed / rolled back within 1 hour', 1), (41, 'Yes, builds are fixed / rolled back within a day', .5), (41, 'No', 0),
(42, 'Yes', 1), (42, 'No', 0),
(43, 'Yes', 1), (43, 'No', 0),
(44, 'Yes, code is often updated independently of new functions or features to ensure technical debt is minimized', 1), (44, 'No, code is only updated to enable new features or functionality', 0),
(45, 'Yes', 1), (45, 'No', 0),
(46, 'Yes', 1), (46, 'No', 0),
(47, 'All product code is developed using TDD', 2), (47, 'Some product code is developed using TDD', 1), (47, 'TDD is not used at all', 0),
(48, 'Yes', 1), (48, 'No', 0),
(49, 'Yes', 1), (49, 'No', 0),
(50, 'Yes', 1), (50, 'No', 0),
(51, 'Yes', 1), (51, 'No', 0),
(52, 'Yes', 1), (52, 'No', 0),
(53, 'Yes', 1), (53, 'No', 0),
(54, 'Yes', 1), (54, 'No', 0),
(55, 'Yes', 1), (55, 'No', 0),
(56, 'Yes', 1), (56, 'No', 0),
(57, 'Yes', 1), (57, 'No', 0),
(58, 'Yes', 1), (58, 'No', 0),
(59, 'Yes', 1), (59, 'No', 0),
(60, 'Yes', 1), (60, 'No', 0),
(61, 'Yes', 1), (61, 'No', 0),
(62, 'Yes', 1), (62, 'No', 0),
(63, 'Yes', 1), (63, 'No', 0),
(64, 'Yes', 1), (64, 'No', 0),
(65, 'Yes', 1), (65, 'No', 0),
(66, 'Business users are embedded within the team', 2), (66, 'The team meets with the business at least every week', 1), (66, 'The team meets with the business at least every month', .5), (66, 'Rarely or not at all', 0),
(67, 'Yes, we rarely have issues with business cases or bureaucratic processes', 2), (67, 'Yes, there is buy-in and understanding, but business processes are still too rigid', 1), (67, 'No', 0),
(68, 'Yes', 1), (68, 'No', 0),
(69, 'Yes', 1), (69, 'No', 0),
(70, 'We have a defined set of CI/CD tooling that is universally used', 1), (70, 'We have defined code repository tooling and standardised usage processes for them (e.g. branching pattern)', 1), (70, 'We have defined monitoring tooling', 1), (70, 'We have defined patching/upgrade tooling and processes (e.g. immutable vs. mutable)', 1),
(71, 'Yes, with a sufficient portfolio of options to meet our development need', 2), (71, 'Yes, but with an insufficient portfolio of options to meet our development needs', 1), (71, 'No, any team can choose any stack/language without constraint', 0),
(72, 'Yes', 1), (72, 'No', 0),
(73, 'Yes', 1), (73, 'No', 0),
(74, 'Yes', 1), (74, 'No', 0);